const s=location.pathname.split("/").slice(0,-1).join("/"),r=[s+"/_app/immutable/entry/app.NDsN6YW5.js",s+"/_app/immutable/nodes/0.JT8z8ydV.js",s+"/_app/immutable/assets/0.B6_LLNOs.css",s+"/_app/immutable/nodes/1.CwF7gRMO.js",s+"/_app/immutable/nodes/2.C8nHNn6u.js",s+"/_app/immutable/chunks/9yHYko7p.js",s+"/_app/immutable/chunks/C6XLyyDo.js",s+"/_app/immutable/chunks/CsiQVNsO.js",s+"/_app/immutable/chunks/D7IEW8hv.js",s+"/_app/immutable/chunks/DUNWw_Ew.js",s+"/_app/immutable/chunks/NZTpNUN0.js",s+"/_app/immutable/entry/start.C3ZF4vPz.js"],u=[s+"/favicon.png"],l="1752955689918",i=`cache-${l}`,p=[...r,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(i)).addAll(p)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),c=await caches.open(i);if(p.includes(t.pathname)){const a=await c.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&c.put(e.request,a.clone()),a}catch(a){const o=await c.match(e.request);if(o)return o;throw a}}e.respondWith(n())});
